// Copyright (c) 2023 Dashlane Inc
// This software is licensed under the MIT License. See the LICENSE.md file for details.

import Foundation
import CryptoKit

/// Sealed Box that contains the encrypted vault.
///
/// The SealedBox is generated by the vault provider and transmitted to the Vault receiver.
public struct SealedBox: Codable, Equatable {
    /// Public Key of the Vault provider used to share the vault content symmetric key with the vault receiver.
    let publicKey: PublicKey

    /// Encrypted ``Vault`` using with shared key between vault receiver and provider.
    let encryptedVault: Data

    /// Salt used for symmetric key derivation.
    let keyDerivationSalt: Data

    /// Sealed Box that contains the encrypted vault to transmit to the vault receiver.
    /// - Parameters:
    ///   - publicKey: Public Key of the Vault provider used to share the vault content symmetric key with the vault receiver.
    ///   - encryptedVault: Encrypted ``Vault`` using with shared key between vault receiver and provider.
    ///   - keyDerivationSalt:  Salt used for symmetric key derivation.
    public init(publicKey: PublicKey,
                encryptedVault: Data,
                keyDerivationSalt: Data) {
        self.publicKey = publicKey
        self.encryptedVault = encryptedVault
        self.keyDerivationSalt = keyDerivationSalt
    }
}
